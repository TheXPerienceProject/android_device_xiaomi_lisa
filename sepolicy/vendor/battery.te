define(`battery_daemons', `{ batteryd batterysecret }')

type batteryd, domain;
type batteryd_exec, exec_type, vendor_file_type, file_type;
type batterysecret, domain;
type batterysecret_exec, exec_type, vendor_file_type, file_type;
type persist_subsys_file, vendor_persist_type, file_type;

init_daemon_domain(batteryd)
init_daemon_domain(batterysecret)

r_dir_file(battery_daemons, cgroup)
r_dir_file(battery_daemons, mnt_vendor_file)
r_dir_file(battery_daemons, persist_subsys_file)
r_dir_file(battery_daemons, rootfs)
r_dir_file(battery_daemons, vendor_sysfs_battery_supply)
r_dir_file(battery_daemons, sysfs_batteryinfo)
r_dir_file(battery_daemons, sysfs_type)
r_dir_file(battery_daemons, vendor_sysfs_usb_supply)
r_dir_file(battery_daemons, vendor_sysfs_usbpd_device)

allow battery_daemons {
  mnt_vendor_file
  persist_subsys_file
  rootfs
}:dir rw_dir_perms;

allow battery_daemons {
  sysfs
  sysfs_leds
  sysfs_battery_supply
  vendor_sysfs_battery_supply
  sysfs_usb
  vendor_sysfs_usb_supply
  vendor_sysfs_usbpd_device
}:file rw_file_perms;

allow battery_daemons kmsg_device:chr_file rw_file_perms;
allow battery_daemons persist_subsys_file:file w_file_perms;
allow battery_daemons self:global_capability_class_set sys_tty_config;
allow battery_daemons self:global_capability_class_set sys_boot;

allow battery_daemons self:netlink_kobject_uevent_socket create_socket_perms_no_ioctl;

allow battery_daemons self:capability { chown fsetid };

allow battery_daemons {
  system_suspend_hwservice
  hidl_manager_hwservice
}:hwservice_manager find;

wakelock_use(battery_daemons)
